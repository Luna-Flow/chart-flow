package "Luna-Flow/chart-flow"

import(
  "gmlewis/image/color"
  "moonbitlang/core/list"
)

// Values

// Types and methods
pub(all) struct Circle[T] {
  center_x : T
  center_y : T
  radius : T
}

pub(all) struct DashPattern {
  length : Double
  gap : Double
}

pub(all) struct Ellipse[T] {
  center_x : T
  center_y : T
  radius_x : T
  radius_y : T
}

pub(all) struct Fill {
  color : Paint
  opacity : Double?
  rule : FillRule
}

pub(all) enum FillRule {
  NonZero
  EvenOdd
}

pub(all) type GradientStop (&@color.Color, Double)

pub(all) enum GradientType {
  Linear
  Radial
}

pub(all) struct ImageElement {
  href : String
  width : Double
  height : Double
  position : Position
  transform : Transform?
}

pub(all) struct Layer {
  elements : Array[&Element]
  index : Int
  name : String
  visible : Bool
  opacity : Double
}

pub(all) struct Line[T] {
  x1 : T
  y1 : T
  x2 : T
  y2 : T
}

pub(all) enum LineCap {
  Butt
  Round
  Square
}

pub(all) enum LineJoin {
  Miter
  Round
  Bevel
}

pub(all) enum Number {
  Number(Double)
}

pub(all) enum Paint {
  Solid(@color.RGBA)
  Gradient(GradientType, @color.RGBA, Position, @color.RGBA, Position, Array[GradientStop])
}

pub(all) type Path @list.T[PathCommand]

pub(all) enum PathCommand {
  Move(Position)
  MoveTo(Position)
  Line(Position)
  LineTo(Position)
  Horizontal(Double)
  HorizontalTo(Position)
  Vertical(Double)
  VerticalTo(Position)
  Quadratic(Position, Position)
  QuadraticTo(Position, Position)
  SmoothQuadratic(Position)
  SmoothQuadraticTo(Position)
  Cubic(Position, Position, Position)
  CubicTo(Position, Position, Position)
  SmoothCubic(Position)
  SmoothCubicTo(Position)
  Arc(Double, Double, Double, Bool, Bool, Position)
  ArcTo(Double, Double, Double, Bool, Bool, Position)
  Close
}

pub(all) struct PathElement {
  anchor : Position
  path : Path
  fill : Fill?
  stroke : Stroke?
  transform : Transform?
}

pub(all) enum Percent {
  Percent(Double)
}

pub(all) struct Polygon {
  points : @list.T[Position]
}

pub(all) struct Polyline {
  points : @list.T[Position]
}

pub(all) type Position (Double, Double)

pub(all) struct ShapeElement[S] {
  anchor : Position
  shape : S
  fill : Fill?
  stroke : Stroke?
}

pub(all) struct Stroke {
  width : Double
  color : Paint
  line_cap : LineCap
  line_join : LineJoin
  miter_limit : Double
  dash_pattern : Array[DashPattern]
}

pub(all) enum TextAnchor {
  Start
  Middle
  End
}

pub(all) struct TextElement {
  content : String
  position : Position
  font_family : String
  font_size : Double
  text_anchor : TextAnchor
  fill : Fill?
  stroke : Stroke?
  transform : Transform?
}

pub(all) enum Transform {
  Combine(Transform, Transform)
  Matrix(Double, Double, Double, Double, Double, Double)
  Translate(Double, Double)
  Scale(Double, Double)
  Rotate(Double, Position?)
  SkewX(Double)
  SkewY(Double)
}

// Type aliases

// Traits
pub(open) trait Element {
}

pub(open) trait NumberType {
}

pub(open) trait Shape {
}

