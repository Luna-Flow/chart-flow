package "Luna-Flow/chart-flow"

import(
  "gmlewis/image/color"
  "moonbitlang/core/immut/list"
)

// Values

// Types and methods
pub(all) struct Circle {
  center_x : Size
  center_y : Size
  radius : Size
}

pub(all) struct Ellipse {
  center_x : Size
  center_y : Size
  radius_x : Size
  radius_y : Size
}

pub(all) struct Fill {
  color : Paint
  opacity : Double?
  rule : FillRule
}

pub(all) enum FillRule {
  NonZero
  EvenOdd
}

pub(all) type GradientStop (Size, @color.RGBA, Double)
impl ToSVG for GradientStop

pub(all) struct ImageElement {
  href : String
  width : Double
  height : Double
  position : Position
  transform : @list.T[Transform]
}

pub(all) struct Layer {
  elements : Array[&Element]
  index : Int
  name : String
  visible : Bool
  opacity : Double
}

pub(all) struct Line {
  x1 : Size
  y1 : Size
  x2 : Size
  y2 : Size
}

pub(all) enum LineCap {
  Butt
  Round
  Square
}
impl Show for LineCap

pub(all) enum LineJoin {
  Arcs
  Bevel
  Miter
  MiterClip
  Round
}
impl Show for LineJoin

pub(all) struct LinearGradient {
  id : String
  start : (Double, Double)?
  end : (Double, Double)?
  transform : @list.T[Transform]
  stops : Array[GradientStop]
}

pub(all) enum Paint {
  Solid(@color.RGBA)
  Gradient(String)
}
impl ToSVG for Paint

pub(all) type Path @list.T[PathCommand]
impl Path {
  from_array(Array[PathCommand]) -> Self
}
impl ToSVG for Path

pub(all) enum PathCommand {
  Move(Position)
  MoveTo(Position)
  Line(Position)
  LineTo(Position)
  Horizontal(Size)
  HorizontalTo(Size)
  Vertical(Size)
  VerticalTo(Size)
  Quadratic(Position, Position)
  QuadraticTo(Position, Position)
  SmoothQuadratic(Position)
  SmoothQuadraticTo(Position)
  Cubic(Position, Position, Position)
  CubicTo(Position, Position, Position)
  SmoothCubic(Position, Position)
  SmoothCubicTo(Position, Position)
  Arc(Position, Double, Bool, Bool, Position)
  ArcTo(Position, Double, Bool, Bool, Position)
  Close
}
impl ToSVG for PathCommand

pub(all) struct PathElement {
  anchor : Position
  path : Path
  fill : Fill?
  stroke : Stroke?
  transform : @list.T[Transform]
}

pub(all) struct Polygon {
  points : @list.T[Position]
}

pub(all) struct Polyline {
  points : @list.T[Position]
}

pub(all) type Position (Size, Size)

pub(all) struct RadialGradient {
  id : String
  coordinate : (Double, Double)?
  gradient_stops : Array[GradientStop]
}

pub(all) struct ShapeElement[S] {
  anchor : Position
  shape : S
  fill : Fill?
  stroke : Stroke?
}

type Size
impl Size {
  calc(Self, Double) -> Double
  calc_keep_pct(Self) -> Self
  same_parent(Self, Self) -> Bool
}
impl Add for Size
impl Eq for Size

pub(all) struct Stroke {
  color : Paint
  dash_array : Array[Double]
  dash_offset : Double?
  line_cap : LineCap?
  line_join : LineJoin?
  miter_limit : Double?
  opacity : Double?
  width : Double?
}
impl ToSVG for Stroke

pub(all) enum TextAnchor {
  Start
  Middle
  End
}

pub(all) struct TextElement {
  content : String
  position : Position
  font_family : String
  font_size : Double
  text_anchor : TextAnchor
  fill : Fill?
  stroke : Stroke?
  transform : @list.T[Transform]
}

pub(all) enum Transform {
  Matrix(Double, Double, Double, Double, Double, Double)
  Translate(Position)
  Scale(Double, Double)
  Rotate(Double, Position?)
  SkewX(Double)
  SkewY(Double)
}

// Type aliases

// Traits
pub(open) trait Def {
  id(Self) -> String
}

pub(open) trait Element {
}

pub(open) trait Shape {
  to_path(Self) -> Path
}

pub(open) trait Style {
  to_style(Self) -> String
}

pub(open) trait ToHex {
  to_hex(Self) -> String
}
impl ToHex for Byte

pub(open) trait ToSVG {
  to_svg(Self, Double?) -> String
}

